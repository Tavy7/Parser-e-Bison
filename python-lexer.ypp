/** Lexical analyser for Python */

/* Disable unneeded features */
%option noyywrap nounput noinput batch

/* Enable debug mode */
/* %option debug */

%{
    // Include the common interface
    #include "common.hpp"

    // Include the parser's function definitions
    #include "python-parser.hpp"
%}

BLANK [[:space:]]

DIGIT [0-9]

INTEGER {DIGIT}+

IDENTIFIER [[:alpha:]]([[:alnum:]]|_)*

/* Define an exclusive mode for the multi line comment */
%x COMMENT

%%

"#".+ /* Ignore single line comment */

<INITIAL>"'''" BEGIN(COMMENT);
<COMMENT>"'''" BEGIN(INITIAL);
<COMMENT>.|"\n" /* Ignore comment contents */
import return yy::parser::make_IMPORT_KEYWORD();
class return yy::parser::make_CLASS_KEYWORD();
as return yy::parser::make_AS_KEYWORD();
def return yy::parser::make_DEF_KEYWORD();

if return yy::parser::make_IF_KEYWORD();
while return yy::parser::make_WHILE_KEYWORD();
return return yy::parser::make_RETURN_KEYWORD();
print return yy::parser::make_PRINT_KEYWORD();

"(" return yy::parser::make_OPEN_PARENS();
")" return yy::parser::make_CLOSE_PARENS();
"[" return yy::parser::make_OPEN_SQUARE_BRACKET();
"]" return yy::parser::make_CLOSE_SQUARE_BRACKET();
"{" return yy::parser::make_OPEN_BRACKET();
"}" return yy::parser::make_CLOSE_BRACKET();
"=" return yy::parser::make_EQUALS();
"," return yy::parser::make_COMMA();
"." return yy::parser::make_DOT();
"+" return yy::parser::make_PLUS();
"-" return yy::parser::make_MINUS();
"<" return yy::parser::make_LESS_THAN();
">" return yy::parser::make_GREATER_THAN();
":" return yy::parser::make_COLON();
"\t" return yy::parser::make_TAB();
"\n" return yy::parser::make_NEWLINE();

{INTEGER} return yy::parser::make_NUMBER(std::stoi(yytext));

\".+\" return yy::parser::make_STRING(yytext);

{IDENTIFIER} return yy::parser::make_IDENTIFIER(yytext);

[[:space:]] /* Ignore whitespace */



%%
